


合约开发实战 ——Meme 代币系列教学作业
一、作业目标
本次作业旨在让学生深入理解 Meme 代币的核心机制，包括代币税、流动性池和交易限制等概念，并通过实践操作，独立实现 SHIB 风格代币合约，提升智能合约开发的实践能力和解决实际问题的能力。
二、作业内容
（一）理论知识梳理
代币税机制分析：简述代币税在 Meme 代币经济模型中的作用，说明其对代币价格稳定和市场流动性的影响。分析常见的代币税征收方式，如交易税、持有税等，并举例说明如何通过调整税率来实现特定的经济目标。
流动性池原理探究：解释流动性池在去中心化交易中的工作原理，分析其与传统订单簿交易模式的区别。阐述流动性提供者如何通过提供流动性获得收益，以及流动性池面临的风险，如无常损失等。
交易限制策略探讨：讨论在 Meme 代币合约中设置交易限制的目的，如防止价格操纵、保护投资者利益等。列举常见的交易限制策略，如交易额度限制、交易频率限制等，并分析这些策略的优缺点。
（二）实践操作
合约开发：基于以太坊或其他主流区块链平台，使用 Solidity 或其他智能合约开发语言，实现一个 SHIB 风格的 Meme 代币合约。合约需包含以下功能：
代币税功能：实现交易税机制，对每笔代币交易征收一定比例的税费，并将税费分配给特定的地址或用于特定的用途。
流动性池集成：设计并实现与流动性池的交互功能，支持用户向流动性池添加和移除流动性。
交易限制功能：设置合理的交易限制，如单笔交易最大额度、每日交易次数限制等，防止恶意操纵市场。
代码注释与文档撰写：在合约代码中添加详细的注释，解释每个函数和变量的作用及实现逻辑。撰写一份操作指南，说明如何部署和使用该代币合约，包括如何进行代币交易、添加和移除流动性等操作。
三、作业提交要求
提交形式：以压缩包的形式提交作业，压缩包内包含理论知识梳理文档、智能合约代码文件和操作指南文档。理论知识梳理文档和操作指南文档采用 Markdown 格式。
文档内容：理论知识梳理文档需条理清晰、内容准确，对相关概念和原理进行深入分析。操作指南文档需详细、易懂，确保他人能够根据文档顺利部署和使用代币合约。




需求文档
建议：

需要写测试！！！
合约开发完成后部署到 sepolia 进行测试
可以自己在sepolia 上面发一个erc20 token 作为reward token的代币
第一个stake token 是所在链的native currency；如果想开其他pool，stake token 可以是erc20Token，合约自行改造调整。

1️⃣ 系统概述
Stake 是一个基于区块链的质押系统，支持多种代币的质押，并基于用户质押的代币数量和时间长度分配 MetaNode代币作为奖励。系统可提供多个质押池，每个池可以独立配置质押代币、奖励计算等。

2️⃣ 功能需求
2.1 质押功能
输入参数: 池 ID(_pid)，质押数量(_amount)。
前置条件: 用户已授权足够的代币给合约。
后置条件: 用户的质押代币数量增加，池中的总质押代币数量更新。
异常处理: 质押数量低于最小质押要求时拒绝交易。

2.2 解除质押功能
输入参数: 池 ID(_pid)，解除质押数量(_amount)。
前置条件: 用户质押的代币数量足够。
后置条件: 用户的质押代币数量减少，解除质押请求记录，等待锁定期结束后可提取。
异常处理: 如果解除质押数量大于用户质押的数量，交易失败。

2.3 领取奖励
输入参数: 池 ID(_pid)。
前置条件: 有可领取的奖励。
后置条件: 用户领取其奖励，清除已领取的奖励记录。
异常处理: 如果没有可领取的奖励，不执行任何操作。

2.4 添加和更新质押池
输入参数: 质押代币地址(_stTokenAddress)，池权重(_poolWeight)，最小质押金额(_minDepositAmount)，解除质押锁定区(_unstakeLockedBlocks)。
前置条件: 只有管理员可操作。
后置条件: 创建新的质押池或更新现有池的配置。
异常处理: 权限验证失败或输入数据验证失败。

2.5 合约升级和暂停
升级合约: 只有持有升级角色的账户可执行。
暂停/恢复操作: 可以独立控制质押、解除质押、领奖等操作的暂停和恢复。

3️⃣ 数据结构
3.1 Pool
stTokenAddress: 质押代币的地址。
poolWeight: 质押池的权重，影响奖励分配。
lastRewardBlock: 最后一次计算奖励的区块号。
accMetaNodePerST: 每个质押代币累积的 RCC 数量。
stTokenAmount: 池中的总质押代币量。
minDepositAmount: 最小质押金额。
unstakeLockedBlocks: 解除质押的锁定区块数。

3.2 User
stAmount: 用户质押的代币数量。
finishedMetaNode: 已分配的 MetaNode数量。
pendingMetaNode: 待领取的 MetaNode 数量。
requests: 解质押请求列表，每个请求包含解质押数量和解锁区块。





Foundry 框架（选修）
理论知识回顾：请简要阐述 Foundry 框架作为智能合约测试 / 部署 / 调试全流程工具链的主要组成部分及其功能。
实践操作：
利用 Forge 搭建一个简单的智能合约测试环境，编写一个包含基本算术运算（如加法、减法）的智能合约，并对其进行单元测试。要求在测试过程中记录并分析合约的 Gas 消耗情况。
针对上述智能合约，尝试进行至少两种不同的 Gas 优化策略（例如优化合约代码结构、减少不必要的操作等），重新进行 Gas 消耗测试，并对比优化前后的 Gas 消耗数据，分析优化效果。
提交智能合约代码、测试代码、Gas 消耗数据记录以及优化分析报告。