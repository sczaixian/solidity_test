




gas:

indexed ----  375
uint256 ----  16





IPFS
https://docs.ipfs.tech/install/ipfs-desktop/#windows


    预言机：输入预言机（链下往链上送数据）；输出预言机；计算预言机（链下执行计算任务）

    预言机是指获取、验证外部信息（即存储在链下的信息）并将外部信息传送给在区块链上运行的智能合约的应用程序
    主要解决不确定性交易达成共识问题

链上获得链下的数据或信息

提交交易，广播交易，达成共识


多节点预言机网络 DON（decentralized oracle network） 

去中心化的预言机网络


线下数据 --> data providers ---> DON ---> transmit ---> data feed contract(喂价合约) <--- 通过函数名和地址获取相应数据

链上 通过  aggregator（聚合合约）收取 链下数据  <--- 代理合约读取聚合合约  <-----  链上合约 读取代理

预言机合约是预言机服务的链上部分。 它侦听其他合约的数据请求，将数据查询转送到预言机节点，并将返回的数据广播到客户端合约。
它公开了一些函数，客户端合约在发出数据请求时调用它们


coin : 独立链，价值存储和支付；创建成本高，多属商品，用底层“燃料”
token：寄生链（如以太坊），多功能（治理/资产映射/服务访问），创建成本低，可能属性：如证券，属于应用层“工具”










npx hardhat --init

npx hardhat  查看帮助

编译：
npx hardhat build

测试：
npx hardhat test solidity
 文件包括 contract 下面的 .t.sol 文件  和  test 文件夹下的索引 .sol文件

npx hardhat test nodejs


npx hardhat run scripts/send-op-tx.ts

npx hardhat ignition deploy ignition/modules/Counter.ts


部署一般都用 ethers.js  // 文档：https://docs.ethers.org/v6/api/











npm install @openzeppelin/contracts --save-dev
npm install @chainlink/contracts


hardhat-config
sepolia
url:  alchemy  infura  quickNode

alchemy.com
















www.infura.io/faucet/sepolia
test git
0dcf1761eeb2457fb9412f9c4bf59642
https://mainnet.infura.io/v3/0dcf1761eeb2457fb9412f9c4bf59642


curl --url https://mainnet.infura.io/v3/0dcf1761eeb2457fb9412f9c4bf59642 \
  -X POST \
  -H "Content-Type: application/json" \
  -d '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}'




decf550fcc469204df8d024977ad887c888a3164b0977f588ae645d3786b4511

https://dashboard.alchemy.com/?a=index
API key: RmsPYhly5O6-XH8UdmqCQ
https://eth-sepolia.g.alchemy.com/v2/RmsPYhly5O6-XH8UdmqCQ
curl 'https://eth-sepolia.g.alchemy.com/v2/RmsPYhly5O6-XH8UdmqCQ/getNFTs/?owner=vitalik.eth'




https://etherscan.io/apidashboard  apikey

TZ1JWZAT8XK1M8V4JIVD2XJGHU93GRHQ86





0x751599F0a9069D95062edb35F0078cd02BA66cC9











-----------------------------js  ts 语法相关----------------------------------
// 立即执行函数
;(function() {
  // ...
})()

// 以数组/正则开头时
const x = 1
;[1, 2, 3].forEach(console.log)


--ts---类型声明需要特殊处理
interface Foo {
  bar: string;  // 类型成员需要分号或逗号
  baz: number,  // 也可以用逗号
}